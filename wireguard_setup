#!/bin/bash

# WireGuard VPN Setup Script with QR Code Generation
# Reads config from wireguard_setup.conf by default

CONFIG_FILE="${1:-wireguard_setup.conf}"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_PATH="./wireguard_init.conf"

# Color codes
GREEN='\033[0;32m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BOLD='\033[1m'
NC='\033[0m'

# Logging functions
log() {
    echo -e "${CYAN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   error "This script must be run as root"
   exit 1
fi

# Load configuration
if [[ ! -f "$CONFIG_PATH" ]]; then
    error "Configuration file not found: $CONFIG_PATH"
    echo "Creating sample configuration file..."
    
    cat > "$CONFIG_PATH" << 'EOF'
# WireGuard VPN Configuration
SERVER_IP=""  # Leave empty to auto-detect
CLIENT_NAME="phone"
VPN_SUBNET="10.0.0.0/24"
SERVER_VPN_IP="10.0.0.1"
CLIENT_VPN_IP="10.0.0.2"
LISTEN_PORT="51820"
DNS_SERVERS="1.1.1.1, 8.8.8.8"
NETWORK_INTERFACE="eth0"  # Auto-detect if empty
EOF
    
    error "Please edit $CONFIG_PATH with your settings and run again"
    exit 1
fi

# Source the configuration
source "$CONFIG_PATH"

# Auto-detect server IP if not set
if [[ -z "$SERVER_IP" ]]; then
    SERVER_IP=$(curl -s -4 ifconfig.me)
    if [[ -z "$SERVER_IP" ]]; then
        error "Could not auto-detect server IP. Please set SERVER_IP in config file."
        exit 1
    fi
    log "Auto-detected server IP: $SERVER_IP"
fi

# Auto-detect network interface if not set
if [[ -z "$NETWORK_INTERFACE" ]]; then
    NETWORK_INTERFACE=$(ip route | grep default | awk '{print $5}' | head -1)
    if [[ -z "$NETWORK_INTERFACE" ]]; then
        NETWORK_INTERFACE="eth0"
        warning "Could not auto-detect network interface. Using default: $NETWORK_INTERFACE"
    else
        log "Auto-detected network interface: $NETWORK_INTERFACE"
    fi
fi

log "Starting WireGuard VPN setup..."
log "Server IP: $SERVER_IP"
log "Client Name: $CLIENT_NAME"
log "VPN Subnet: $VPN_SUBNET"

# Step 1: System Update and Package Installation
log "Updating system and installing WireGuard..."
apt update
apt install -y wireguard qrencode ufw boxes

# Step 2: Enable IP forwarding
log "Enabling IP forwarding..."
echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
echo 'net.ipv6.conf.all.forwarding=1' >> /etc/sysctl.conf
sysctl -p

# Step 3: Create WireGuard directory and generate server keys
log "Generating server keys..."
mkdir -p /etc/wireguard/clients
cd /etc/wireguard

# Generate server keys
wg genkey | tee privatekey | wg pubkey | tee publickey
chmod 600 privatekey
chmod 644 publickey

SERVER_PRIVATE_KEY=$(cat privatekey)
SERVER_PUBLIC_KEY=$(cat publickey)

success "Server keys generated"

# Step 4: Generate client keys
log "Generating client keys for $CLIENT_NAME..."
cd /etc/wireguard/clients
wg genkey | tee "${CLIENT_NAME}_privatekey" | wg pubkey | tee "${CLIENT_NAME}_publickey"
chmod 600 "${CLIENT_NAME}_privatekey"
chmod 644 "${CLIENT_NAME}_publickey"

CLIENT_PRIVATE_KEY=$(cat "${CLIENT_NAME}_privatekey")
CLIENT_PUBLIC_KEY=$(cat "${CLIENT_NAME}_publickey")

success "Client keys generated"

# Step 5: Create server configuration
log "Creating server configuration..."
cat > /etc/wireguard/wg0.conf << SERVERCONF
[Interface]
PrivateKey = $SERVER_PRIVATE_KEY
Address = $SERVER_VPN_IP/24
ListenPort = $LISTEN_PORT
PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o $NETWORK_INTERFACE -j MASQUERADE
PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o $NETWORK_INTERFACE -j MASQUERADE
SaveConfig = true

[Peer]
PublicKey = $CLIENT_PUBLIC_KEY
AllowedIPs = $CLIENT_VPN_IP/32
SERVERCONF

success "Server configuration created"

# Step 6: Create client configuration
log "Creating client configuration..."
cat > "/etc/wireguard/clients/${CLIENT_NAME}.conf" << CLIENTCONF
[Interface]
PrivateKey = $CLIENT_PRIVATE_KEY
Address = $CLIENT_VPN_IP/24
DNS = $DNS_SERVERS

[Peer]
PublicKey = $SERVER_PUBLIC_KEY
Endpoint = $SERVER_IP:$LISTEN_PORT
AllowedIPs = 0.0.0.0/0, ::/0
PersistentKeepalive = 25
CLIENTCONF

success "Client configuration created"

# Step 7: Configure firewall
log "Configuring firewall..."
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow $LISTEN_PORT/udp
ufw --force enable

success "Firewall configured"

# Step 8: Start WireGuard service
log "Starting WireGuard service..."
systemctl enable wg-quick@wg0
systemctl start wg-quick@wg0

if systemctl is-active --quiet wg-quick@wg0; then
    success "WireGuard service started successfully"
else
    error "Failed to start WireGuard service"
    systemctl status wg-quick@wg0
    exit 1
fi

# Step 9: Generate and display QR code
log "Generating QR code and config for client setup..."
echo ""
echo "SCAN THIS QR CODE WITH YOUR PHONE" | boxes -d simple
echo ""

qrencode -t ansiutf8 < "/etc/wireguard/clients/${CLIENT_NAME}.conf"

echo "OR COPY THIS CONFIG FOR DESKTOP/MOBILE" | boxes -d simple
echo ""
echo -e "${YELLOW}Copy the config below and paste into WireGuard client:${NC}"
echo ""
cat "/etc/wireguard/clients/${CLIENT_NAME}.conf"

echo ""
echo "WIREGUARD VPN SETUP COMPLETED

✅ Server: Running on port $LISTEN_PORT
✅ Client Config: Generated
✅ QR Code: Ready for scanning
✅ Firewall: Configured

📱 Mobile Setup:
   1. Install WireGuard app
   2. Tap '+' or 'Add tunnel'
   3. Scan QR code above
   4. Enable the tunnel

📁 Config Files:
   Server: /etc/wireguard/wg0.conf
   Client: /etc/wireguard/clients/${CLIENT_NAME}.conf

🔧 Management Commands:
   Status: sudo wg show
   Restart: sudo systemctl restart wg-quick@wg0
   Logs: sudo journalctl -u wg-quick@wg0" | boxes -d stone
echo ""

# Step 10: Display connection info
log "Connection Information:"
echo "  Server IP: $SERVER_IP"
echo "  Server VPN IP: $SERVER_VPN_IP"
echo "  Client VPN IP: $CLIENT_VPN_IP"
echo "  Port: $LISTEN_PORT/udp"

# Step 11: Test server status
log "Testing WireGuard status..."
wg show

success "WireGuard VPN setup completed successfully!"
log "Your VPN is ready! Share the QR code above with your phone."

# Save QR code to file for later use
log "Saving QR code to file..."
qrencode -t png -o "/etc/wireguard/clients/${CLIENT_NAME}_qr.png" < "/etc/wireguard/clients/${CLIENT_NAME}.conf"
success "QR code saved to /etc/wireguard/clients/${CLIENT_NAME}_qr.png"

echo ""
echo "🎉 Setup complete! Your VPN is ready for use."
echo "📱 Scan the QR code with WireGuard app on your phone."
echo "🌐 All traffic will be routed through your VPS."
