#!/bin/bash

# WireGuard Client List and Retrieval Script
# This script lists existing WireGuard clients and allows retrieving their QR codes and configurations

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    error "This script must be run as root"
    exit 1
fi

# Check if WireGuard is installed
if ! command -v wg &> /dev/null; then
    error "WireGuard is not installed. Please run wireguard_setup first."
    exit 1
fi

# Check if qrencode is available
if ! command -v qrencode &> /dev/null; then
    error "qrencode is not installed. Please install it first."
    exit 1
fi

# Check if boxes is available
if ! command -v boxes &> /dev/null; then
    error "boxes utility is not installed. Please install it first."
    exit 1
fi

CLIENTS_DIR="/etc/wireguard/clients"

# Function to list all clients
list_clients() {
    local server_config="/etc/wireguard/wg0.conf"
    
    if [[ ! -f "$server_config" ]]; then
        error "Server configuration not found at $server_config"
        return 1
    fi

    # Extract peer public keys from server config
    local peer_keys=($(grep -A 1 "^\[Peer\]" "$server_config" | grep "PublicKey" | cut -d' ' -f3))
    
    if [[ ${#peer_keys[@]} -eq 0 ]]; then
        warn "No peers found in server configuration."
        return 1
    fi

    echo ""
    echo "ACTIVE WIREGUARD CLIENTS" | boxes -d simple
    echo ""
    
    local count=1
    for peer_key in "${peer_keys[@]}"; do
        # Find corresponding client config by matching public key
        local client_name=""
        local client_ip=""
        local client_config=""
        
        if [[ -d "$CLIENTS_DIR" ]]; then
            for config_file in "$CLIENTS_DIR"/*.conf; do
                if [[ -f "$config_file" ]]; then
                    # Get the private key from client config and derive public key
                    local private_key=$(grep "PrivateKey" "$config_file" | cut -d' ' -f3)
                    if [[ -n "$private_key" ]]; then
                        local derived_public_key=$(echo "$private_key" | wg pubkey 2>/dev/null)
                        if [[ "$derived_public_key" == "$peer_key" ]]; then
                            client_name=$(basename "$config_file" .conf)
                            client_ip=$(grep "Address" "$config_file" | cut -d' ' -f3)
                            client_config="$config_file"
                            break
                        fi
                    fi
                fi
            done
        fi
        
        # Display client info
        if [[ -n "$client_name" ]]; then
            echo -e "${count}. ${GREEN}${client_name}${NC} (${client_ip}) - Config available"
        else
            # Show peer from server config even if no client config found
            local peer_ip=$(grep -A 2 "PublicKey = $peer_key" "$server_config" | grep "AllowedIPs" | cut -d' ' -f3 | cut -d'/' -f1)
            echo -e "${count}. ${YELLOW}Unknown Client${NC} (${peer_ip}) - No config file found"
        fi
        ((count++))
    done
    echo ""
    
    # Show summary
    local total_peers=${#peer_keys[@]}
    log "Total active peers in server: $total_peers"
}

# Function to get client configuration and QR code
get_client() {
    local client_name="$1"
    local client_config="$CLIENTS_DIR/${client_name}.conf"
    local server_config="/etc/wireguard/wg0.conf"
    
    # First check if client config file exists
    if [[ ! -f "$client_config" ]]; then
        error "Client '$client_name' config file not found."
        return 1
    fi
    
    # Verify client is actually active in server config
    local private_key=$(grep "PrivateKey" "$client_config" | cut -d' ' -f3)
    if [[ -z "$private_key" ]]; then
        error "Invalid client config - no private key found."
        return 1
    fi
    
    local client_public_key=$(echo "$private_key" | wg pubkey 2>/dev/null)
    if [[ -z "$client_public_key" ]]; then
        error "Failed to derive public key from client config."
        return 1
    fi
    
    # Check if this client's public key exists in server config
    if ! grep -q "$client_public_key" "$server_config"; then
        error "Client '$client_name' is not active in server configuration."
        error "The client config exists but the peer is not configured on the server."
        return 1
    fi

    echo ""
    echo "CLIENT: $client_name" | boxes -d simple
    echo ""
    
    # Show client status
    local client_ip=$(grep "Address" "$client_config" | cut -d' ' -f3)
    success "Client '$client_name' is active on server (IP: $client_ip)"
    echo ""
    
    # Display QR code
    echo "SCAN THIS QR CODE WITH YOUR PHONE" | boxes -d simple
    echo ""
    qrencode -t ansiutf8 < "$client_config"
    echo ""
    
    # Display configuration text
    echo "OR COPY THIS CONFIG FOR DESKTOP/MOBILE" | boxes -d simple
    echo ""
    echo -e "${YELLOW}Copy the config below and paste into WireGuard client:${NC}"
    echo ""
    cat "$client_config"
    echo ""
    
    # Regenerate QR code PNG
    local qr_png="$CLIENTS_DIR/${client_name}_qr.png"
    log "Regenerating QR code PNG for client '$client_name'..."
    qrencode -t png -o "$qr_png" < "$client_config"
    
    if [[ -f "$qr_png" ]]; then
        success "QR code PNG saved to: $qr_png"
    else
        error "Failed to generate QR code PNG"
    fi
}

# Function to show usage
show_usage() {
    echo ""
    echo "WireGuard Client List and Retrieval Tool" | boxes -d simple
    echo ""
    echo "Usage: $0 [COMMAND] [CLIENT_NAME]"
    echo ""
    echo "Commands:"
    echo "  list                    - List all available clients"
    echo "  get <client_name>       - Show QR code, config, and regenerate PNG for client"
    echo "  help                    - Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 list"
    echo "  $0 get desktop"
    echo "  $0 get mobile"
    echo ""
}

# Main script logic
case "${1:-}" in
    "list")
        list_clients
        ;;
    "get")
        if [[ -z "${2:-}" ]]; then
            error "Please specify a client name."
            echo "Usage: $0 get <client_name>"
            exit 1
        fi
        get_client "$2"
        ;;
    "help"|"-h"|"--help")
        show_usage
        ;;
    "")
        # No arguments provided - show interactive menu
        list_clients
        if [[ $? -eq 0 ]]; then
            echo ""
            echo -e "${YELLOW}Enter client name to view details (or 'q' to quit):${NC}"
            read -p "> " client_choice
            
            if [[ "$client_choice" != "q" && "$client_choice" != "quit" && -n "$client_choice" ]]; then
                get_client "$client_choice"
            fi
        fi
        ;;
    *)
        error "Unknown command: $1"
        show_usage
        exit 1
        ;;
esac
