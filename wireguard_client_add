#!/bin/bash

# WireGuard Client Add Script
# Adds new clients to existing WireGuard server setup

# Color codes
GREEN='\033[0;32m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BOLD='\033[1m'
NC='\033[0m'

# Configuration file path
CONFIG_PATH="./wireguard_client_add.conf"

# Logging functions
log() {
    echo -e "${CYAN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   error "This script must be run as root"
   exit 1
fi

# Check if WireGuard is installed and running
if ! command -v wg >/dev/null 2>&1; then
    error "WireGuard is not installed. Please run wireguard_setup first."
    exit 1
fi

if ! systemctl is-active --quiet wg-quick@wg0; then
    error "WireGuard service is not running. Please start it first."
    exit 1
fi

# Load configuration
if [[ ! -f "$CONFIG_PATH" ]]; then
    error "Configuration file not found: $CONFIG_PATH"
    echo "Creating sample configuration file..."
    
    cat > "$CONFIG_PATH" << 'EOF'
# WireGuard Client Add Configuration
CLIENT_NAME="client2"
VPN_SUBNET="10.0.0.0/24"
DNS_SERVERS="1.1.1.1, 8.8.8.8"
EOF
    
    error "Please edit $CONFIG_PATH with your settings and run again"
    exit 1
fi

# Source the configuration
source "$CONFIG_PATH"

# Get server configuration from existing setup
SERVER_CONFIG="/etc/wireguard/wg0.conf"
if [[ ! -f "$SERVER_CONFIG" ]]; then
    error "Server configuration not found. Please run wireguard_setup first."
    exit 1
fi

# Extract server info
SERVER_PRIVATE_KEY=$(grep "PrivateKey" "$SERVER_CONFIG" | cut -d' ' -f3)
SERVER_PUBLIC_KEY=$(echo "$SERVER_PRIVATE_KEY" | wg pubkey)
LISTEN_PORT=$(grep "ListenPort" "$SERVER_CONFIG" | cut -d' ' -f3)
SERVER_IP=$(curl -s -4 ifconfig.me)
SERVER_VPN_IP=$(echo "$VPN_SUBNET" | sed 's/0\/24/1/')

# Find next available IP
CLIENTS_DIR="/etc/wireguard/clients"
mkdir -p "$CLIENTS_DIR"

# Get existing client IPs
EXISTING_IPS=$(find "$CLIENTS_DIR" -name "*.conf" -exec grep "Address" {} \; | cut -d' ' -f3 | cut -d'/' -f1 | sort -V)
LAST_OCTET=1

for ip in $EXISTING_IPS; do
    OCTET=$(echo "$ip" | cut -d'.' -f4)
    if [[ $OCTET -gt $LAST_OCTET ]]; then
        LAST_OCTET=$OCTET
    fi
done

NEXT_OCTET=$((LAST_OCTET + 1))
CLIENT_VPN_IP=$(echo "$VPN_SUBNET" | sed "s/0\/24/${NEXT_OCTET}/")

log "Adding new WireGuard client: $CLIENT_NAME"
log "Client VPN IP: $CLIENT_VPN_IP"

# Check if client already exists
if [[ -f "$CLIENTS_DIR/${CLIENT_NAME}.conf" ]]; then
    error "Client '$CLIENT_NAME' already exists. Choose a different name."
    exit 1
fi

# Generate client keys
CLIENT_PRIVATE_KEY=$(wg genkey)
CLIENT_PUBLIC_KEY=$(echo "$CLIENT_PRIVATE_KEY" | wg pubkey)

log "Generating client configuration..."

# Create client configuration
cat > "$CLIENTS_DIR/${CLIENT_NAME}.conf" << EOF
[Interface]
PrivateKey = $CLIENT_PRIVATE_KEY
Address = $CLIENT_VPN_IP/24
DNS = $DNS_SERVERS

[Peer]
PublicKey = $SERVER_PUBLIC_KEY
Endpoint = $SERVER_IP:$LISTEN_PORT
AllowedIPs = 0.0.0.0/0, ::/0
PersistentKeepalive = 25
EOF

log "Adding client to server configuration..."

# Check if SaveConfig is enabled (which can interfere with manual config changes)
if grep -q "SaveConfig = true" "$SERVER_CONFIG"; then
    warning "SaveConfig is enabled. Using wg set command instead of direct config modification."
    
    # Add peer using wg command (works with SaveConfig)
    wg set wg0 peer "$CLIENT_PUBLIC_KEY" allowed-ips "$CLIENT_VPN_IP/32"
    
    # Save the configuration
    wg-quick save wg0
else
    # Add client peer to server config file directly
    cat >> "$SERVER_CONFIG" << EOF

# Client: $CLIENT_NAME
[Peer]
PublicKey = $CLIENT_PUBLIC_KEY
AllowedIPs = $CLIENT_VPN_IP/32
EOF
fi

# Restart WireGuard service
log "Restarting WireGuard service..."
systemctl restart wg-quick@wg0

if systemctl is-active --quiet wg-quick@wg0; then
    success "WireGuard service restarted successfully"
else
    error "Failed to restart WireGuard service"
    systemctl status wg-quick@wg0
    exit 1
fi

# Verify client was added to server configuration
log "Verifying client was added to server configuration..."
sleep 2  # Give WireGuard a moment to load the config

# Check if client public key is in the server config
if grep -q "$CLIENT_PUBLIC_KEY" "$SERVER_CONFIG"; then
    success "Client '$CLIENT_NAME' successfully added to server configuration"
else
    error "Client '$CLIENT_NAME' was NOT found in server configuration!"
    error "This may cause connectivity issues. Please check the server config manually."
    error "Script execution failed - client was not properly added to server."
    exit 1
fi

# Check if client appears in wg show output
WG_PEER_COUNT=$(wg show wg0 peers | wc -l)
log "Current number of peers in WireGuard interface: $WG_PEER_COUNT"

# Verify the specific client peer
if wg show wg0 | grep -q "$CLIENT_PUBLIC_KEY"; then
    success "Client '$CLIENT_NAME' is active in WireGuard interface"
else
    warning "Client '$CLIENT_NAME' not yet visible in WireGuard interface (may need time to connect)"
fi

# Generate and display QR code
log "Generating QR code for client setup..."
echo ""
echo "SCAN THIS QR CODE WITH YOUR PHONE" | boxes -d simple
echo ""

qrencode -t ansiutf8 < "$CLIENTS_DIR/${CLIENT_NAME}.conf"

echo ""
echo "OR COPY THIS CONFIG FOR DESKTOP/MOBILE" | boxes -d simple
echo ""
echo -e "${YELLOW}Copy the config below and paste into WireGuard client:${NC}"
echo ""
cat "$CLIENTS_DIR/${CLIENT_NAME}.conf"

echo ""
echo "CLIENT ADDED SUCCESSFULLY

âœ… Client Name: $CLIENT_NAME
âœ… Client VPN IP: $CLIENT_VPN_IP
âœ… QR Code: Ready for scanning
âœ… Config File: $CLIENTS_DIR/${CLIENT_NAME}.conf

ðŸ“± Mobile Setup:
   1. Install WireGuard app
   2. Tap '+' or 'Add tunnel'
   3. Scan QR code above
   4. Enable the tunnel

ðŸ”§ Management Commands:
   Status: sudo wg show
   Restart: sudo systemctl restart wg-quick@wg0" | boxes -d stone

echo ""

# Save QR code to file
log "Saving QR code to file..."
qrencode -t png -o "$CLIENTS_DIR/${CLIENT_NAME}_qr.png" < "$CLIENTS_DIR/${CLIENT_NAME}.conf"
success "QR code saved to $CLIENTS_DIR/${CLIENT_NAME}_qr.png"

echo ""
success "Client '$CLIENT_NAME' added successfully!"
log "Client config saved to: $CLIENTS_DIR/${CLIENT_NAME}.conf"
log "Share the QR code above with the client device."
