#!/bin/bash

# WireGuard VPN Teardown Script
# Completely removes all WireGuard setup and configurations

# Color codes
GREEN='\033[0;32m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BOLD='\033[1m'
NC='\033[0m'

# Logging functions
log() {
    echo -e "${CYAN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   error "This script must be run as root"
   exit 1
fi

# Confirmation prompt
echo ""
echo "╭──────────────────────────────────────────────────╮"
echo "│                                                  │"
echo "│          WIREGUARD TEARDOWN WARNING       │"
echo "│                                                  │"
echo "│   This will completely remove:                   │"
echo "│   • WireGuard service and configuration          │"
echo "│   • All client keys and configs                 │"
echo "│   • Firewall rules for WireGuard                │"
echo "│   • IP forwarding settings                      │"
echo "│                                                  │"
echo "│   ⚠️  This action cannot be undone!             │"
echo "│                                                  │"
echo "╰──────────────────────────────────────────────────╯"
echo ""

read -p "Are you sure you want to proceed? (yes/no): " confirm
if [[ $confirm != "yes" ]]; then
    log "Teardown cancelled by user"
    exit 0
fi

log "Starting WireGuard teardown..."

# Step 1: Stop and disable WireGuard service
log "Stopping WireGuard service..."
if systemctl is-active --quiet wg-quick@wg0; then
    systemctl stop wg-quick@wg0
    success "WireGuard service stopped"
else
    warning "WireGuard service was not running"
fi

if systemctl is-enabled --quiet wg-quick@wg0 2>/dev/null; then
    systemctl disable wg-quick@wg0
    success "WireGuard service disabled"
else
    warning "WireGuard service was not enabled"
fi

# Step 2: Remove WireGuard interface if it exists
log "Removing WireGuard interface..."
if ip link show wg0 >/dev/null 2>&1; then
    ip link delete wg0
    success "WireGuard interface removed"
else
    warning "WireGuard interface wg0 not found"
fi

# Step 3: Remove WireGuard configuration files
log "Removing WireGuard configuration files..."
if [[ -d "/etc/wireguard" ]]; then
    rm -rf /etc/wireguard
    success "WireGuard configuration directory removed"
else
    warning "WireGuard configuration directory not found"
fi

# Step 4: Remove firewall rules
log "Removing firewall rules..."

# Remove UFW rules for WireGuard
if command -v ufw >/dev/null 2>&1; then
    ufw --force delete allow 51820/udp 2>/dev/null || true
    success "UFW rules for WireGuard removed"
fi

# Remove iptables rules (if they exist)
iptables -D FORWARD -i wg0 -j ACCEPT 2>/dev/null || true
iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE 2>/dev/null || true

# Try common network interfaces
for iface in eth0 ens3 ens4 ens5 enp0s3 enp0s8; do
    iptables -t nat -D POSTROUTING -o $iface -j MASQUERADE 2>/dev/null || true
done

success "iptables rules cleaned up"

# Step 5: Disable IP forwarding (optional - ask user)
read -p "Do you want to disable IP forwarding? This may affect other services (yes/no): " disable_forwarding
if [[ $disable_forwarding == "yes" ]]; then
    log "Disabling IP forwarding..."
    
    # Remove from sysctl.conf
    sed -i '/net.ipv4.ip_forward=1/d' /etc/sysctl.conf 2>/dev/null || true
    sed -i '/net.ipv6.conf.all.forwarding=1/d' /etc/sysctl.conf 2>/dev/null || true
    
    # Disable immediately
    echo 0 > /proc/sys/net/ipv4/ip_forward
    echo 0 > /proc/sys/net/ipv6/conf/all/forwarding
    
    success "IP forwarding disabled"
else
    warning "IP forwarding left enabled"
fi

# Step 6: Remove WireGuard packages (optional)
read -p "Do you want to remove WireGuard packages? (yes/no): " remove_packages
if [[ $remove_packages == "yes" ]]; then
    log "Removing WireGuard packages..."
    
    if command -v apt >/dev/null 2>&1; then
        apt remove --purge -y wireguard qrencode 2>/dev/null || true
        apt autoremove -y 2>/dev/null || true
        success "WireGuard packages removed"
    elif command -v yum >/dev/null 2>&1; then
        yum remove -y wireguard-tools qrencode 2>/dev/null || true
        success "WireGuard packages removed"
    else
        warning "Package manager not recognized, please remove packages manually"
    fi
else
    warning "WireGuard packages left installed"
fi

# Step 7: Clean up any remaining processes
log "Cleaning up remaining processes..."
pkill -f wg-quick 2>/dev/null || true
pkill -f wireguard 2>/dev/null || true

# Step 8: Verify cleanup
log "Verifying cleanup..."
cleanup_issues=0

if systemctl is-active --quiet wg-quick@wg0; then
    error "WireGuard service is still running"
    cleanup_issues=$((cleanup_issues + 1))
fi

if [[ -d "/etc/wireguard" ]]; then
    error "WireGuard configuration directory still exists"
    cleanup_issues=$((cleanup_issues + 1))
fi

if ip link show wg0 >/dev/null 2>&1; then
    error "WireGuard interface still exists"
    cleanup_issues=$((cleanup_issues + 1))
fi

# Final status report
echo ""
if [[ $cleanup_issues -eq 0 ]]; then
    echo "╭──────────────────────────────────────────────────╮"
    echo "│                                                  │"
    echo "│         WIREGUARD TEARDOWN COMPLETED      │"
    echo "│                                                  │"
    echo "│   ✅ Service: Stopped and disabled              │"
    echo "│   ✅ Interface: Removed                         │"
    echo "│   ✅ Configuration: Deleted                     │"
    echo "│   ✅ Firewall: Rules removed                    │"
    echo "│   ✅ Cleanup: Verified                          │"
    echo "│                                                  │"
    echo "│   🎯 WireGuard completely removed               │"
    echo "│                                                  │"
    echo "╰──────────────────────────────────────────────────╯"
    echo ""
    success "WireGuard teardown completed successfully!"
else
    echo "╭──────────────────────────────────────────────────╮"
    echo "│                                                  │"
    echo "│         TEARDOWN COMPLETED WITH ISSUES    │"
    echo "│                                                  │"
    echo "│   ⚠️  Some components may still be present      │"
    echo "│   📋 Check the errors above                     │"
    echo "│   🔧 Manual cleanup may be required             │"
    echo "│                                                  │"
    echo "╰──────────────────────────────────────────────────╯"
    echo ""
    warning "Teardown completed with $cleanup_issues issue(s)"
fi

log "Teardown process finished"
